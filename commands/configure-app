#!/bin/bash
# Configures AWS resources for an application

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}")"; pwd -P )"; source "$BIN_DIR/../include/common"
set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.

help_text() {
    echo "Usage:"
    echo "  aws-app configure-app"
    echo "    - verifies and configures AWS entities for the application"
    echo "  aws-app configure-app help"
    echo "    - displays this help text"
    exit 0
}

if [[ $# -eq 0 ]]; then
    applicationRoot=$( findApplicationRoot )
else
    if [[ "$1" = "-h" || "$1" = "--help" || "$1" = "help" ]]; then
	help_text
    fi
    echo "Unknown arguments: $@"
    exit 1
fi

echo "-- Configuring AWS for $applicationRoot"

loadApplicationProperties "$applicationRoot"

echo "-- Checking if SSH key pair $EC2_KEYPAIR_NAME exists"
if [[ -e ~/.ssh/"$EC2_KEYPAIR_NAME".pem ]]; then
    echo "---- Keypair $EC2_KEYPAIR_NAME already exists in ~/.ssh"
else
    numKeyPairs=$( aws ec2 describe-key-pairs | jq -r '.KeyPairs | length' )
    echo "---- You currently have $numKeyPairs registered keypairs"
    if [[ $numKeyPairs -ge 5000 ]]; then
	echo "---- Exceeding max number of allowed keypairs!  Please remove one and retry"
	exit 1
    fi
    
    echo "---- Creating new keypair $EC2_KEYPAIR_NAME"
    newKey=$( aws ec2 create-key-pair --key-name "$EC2_KEYPAIR_NAME" )
    echo "Created:"
    echo "$newKey"
    echo "$newKey" | jq -r '.KeyMaterial' > ~/.ssh/"$EC2_KEYPAIR_NAME".pem
fi

echo "---- Checking if keypair has correct read/write permissions"
if [[ $( stat -f %A ~/.ssh/"$EC2_KEYPAIR_NAME".pem ) != "400" ]]; then
    echo "---- Setting permissions to 400 on keypair"
    chmod 400 ~/.ssh/"$EC2_KEYPAIR_NAME".pem
fi

echo "-- Checking if IAM role $DEPLOYER_IAM_ROLE_NAME exists"
deployerRoleExists=$( isExitSuccess aws iam get-role --role-name "$DEPLOYER_IAM_ROLE_NAME" )
if [[ "$deployerRoleExists" = "true" ]]; then
    echo "---- IAM role $DEPLOYER_IAM_ROLE_NAME already exists"
else
    echo "---- Creating IAM role $DEPLOYER_IAM_ROLE_NAME"
    aws iam create-role --role-name "$DEPLOYER_IAM_ROLE_NAME" --assume-role-policy-document "file://$BIN_DIR/../templates/application/role-policy.json" --description "Deployer role for $APPLICATION_NAME"

    echo "---- Attaching inline policy (allowing access to codedeploy, s3, and ec2) to role"
    aws iam put-role-policy --role-name "$DEPLOYER_IAM_ROLE_NAME" --policy-name "CodeDeployPolicy" --policy-document "file://$BIN_DIR/../templates/application/inline-policy.json"
fi

echo "-- Checking if default security group $APPLICATION_SECURITY_GROUP_NAME exists"
applicationSecurityGroupExists=$( isExitSuccess aws ec2 describe-security-groups --group-names "$APPLICATION_SECURITY_GROUP_NAME" )
if [[ "$applicationSecurityGroupExists" = "false" ]]; then
    echo "---- Security group $APPLICATION_SECURITY_GROUP_NAME does not exist, creating!"
    aws ec2 create-security-group --group-name "$APPLICATION_SECURITY_GROUP_NAME" --description "SSH access to $APPLICATION_NAME EC2 instances"
else
    echo "---- Security group $APPLICATION_SECURITY_GROUP_NAME already exists"
fi

echo "-- Checking ingress rules for security group $APPLICATION_SECURITY_GROUP_NAME"
sshIngressRule=$( aws ec2 describe-security-groups --group-names segment3SecurityGroup | jq -r '.SecurityGroups | .[0] | .IpPermissions | any( (.IpProtocol = "tcp") and (.ToPort = "21") and (.IpRanges | any( .CidrIp = "0.0.0.0/0")) )' )
if [[ "$sshIngressRule" = "false" ]]; then
    echo "---- Adding rules to allow SSH access to EC2 instances created with security group $APPLICATION_SECURITY_GROUP_NAME"
    aws ec2 authorize-security-group-ingress --group-name "$APPLICATION_SECURITY_GROUP_NAME" --protocol tcp --port 22 --cidr '0.0.0.0/0'
fi

echo "-- Checking if S3 bucket $CODE_DEPLOY_S3_BUCKET_NAME exists"
codeDeployS3BucketExists=$( isExitSuccess aws s3api head-bucket --bucket "$CODE_DEPLOY_S3_BUCKET_NAME" )
if [[ "$codeDeployS3BucketExists" = "false" ]]; then
    echo "---- S3 bucket $CODE_DEPLOY_S3_BUCKET_NAME does not exist, creating!"
    aws s3 mb "s3://$CODE_DEPLOY_S3_BUCKET_NAME" --region $( aws configure get region )
else
    echo "---- S3 bucket $CODE_DEPLOY_S3_BUCKET_NAME already exists"
fi

echo "-- Application configured!"
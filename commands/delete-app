#!/bin/bash
# NAME
#     delete-app - Deletes AWS resources for an application
#
# SYNOPSIS
#     delete-app
#
# DESCRIPTION
#     Deletes all configurations/resources for the application in the current directory
#     Note that all services should be deleted first

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}")"; pwd -P )"; source "$BIN_DIR/../include/common"

if [[ $# -eq 1 ]]; then
    if [[ "$1" = "-h" || "$1" = "--help" || "$1" = "help" ]]; then
	help_text
    fi
    echo "Unknown arguments: $@"
    exit 1
fi

applicationRoot="$( findApplicationRoot )"
loadApplicationProperties "$applicationRoot"

affirm "-- Are you sure you want to delete all AWS resources associated with application: $APPLICATION_NAME (at $applicationRoot)?"

echo "-- Checking if IAM role $DEPLOYER_IAM_ROLE_NAME exists"
deployerRoleExists=$( isExitSuccess aws iam get-role --role-name "$DEPLOYER_IAM_ROLE_NAME" )
if [[ "$deployerRoleExists" = "false" ]]; then
    echo "---- No IAM role $DEPLOYER_IAM_ROLE_NAME found"
else
    managedPolicies=$( aws iam list-attached-role-policies --role-name "$DEPLOYER_IAM_ROLE_NAME" | jq -r '.AttachedPolicies | map( .PolicyArn ) | join( " " )' )
    for policyArn in $managedPolicies; do
	echo "---- Detaching managed policy $policyArn from role"
	aws iam detach-role-policy --role-name "$DEPLOYER_IAM_ROLE_NAME" --policy-arn "$policyArn"
    done
    
    inlinePolicies=$( aws iam list-role-policies --role-name "$DEPLOYER_IAM_ROLE_NAME" | jq -r '.PolicyNames | join(" ")' )
    for policyName in $inlinePolicies; do
	echo "---- Deleting inline policy $policyName from role"
	aws iam delete-role-policy --role-name "$DEPLOYER_IAM_ROLE_NAME" --policy-name "$policyName"
    done
    
    echo "---- Deleting IAM role $DEPLOYER_IAM_ROLE_NAME"
    aws iam delete-role --role-name "$DEPLOYER_IAM_ROLE_NAME"
fi

applicationSecurityGroupExists=$( isExitSuccess aws ec2 describe-security-groups --group-names "$APPLICATION_SECURITY_GROUP_NAME" )
if [[ "$applicationSecurityGroupExists" = "false" ]]; then
    echo "---- No security group $APPLICATION_SECURITY_GROUP_NAME found"
else
    echo "---- Deleting security group $APPLICATION_SECURITY_GROUP_NAME"
    aws ec2 delete-security-group --group-name "$APPLICATION_SECURITY_GROUP_NAME"
fi

codeDeployS3BucketExists=$( isExitSuccess aws s3api head-bucket --bucket "$CODE_DEPLOY_S3_BUCKET_NAME" )
if [[ "$codeDeployS3BucketExists" = "false" ]]; then
    echo "---- No code deploy s3 bucket $CODE_DEPLOY_S3_BUCKET_NAME found"
else
    echo "---- Deleting code deploy s3 bucket $CODE_DEPLOY_S3_BUCKET_NAME"
    aws s3 rb "s3://$CODE_DEPLOY_S3_BUCKET_NAME" --force
fi

echo "-- All resources for application $APPLICATION_NAME are released (except EC2 keypair in ~/.ssh/$EC2_KEYPAIR_NAME.pem)"

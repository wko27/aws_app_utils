#!/bin/bash
# NAME
#     configure-service - Configures AWS resources for a service
#
# SYNOPSIS
#     configure-service
#     configure-service <service>
#
# DESCRIPTION
#     Verifies and configures AWS entities for the service in the current or given directory
#     Any EC2 instances that belong to the service's security group will be attached to the autoscaling group
#     If no EC2 instances nor autoscaling group are found, the newly created autoscaling group will be created desiring 1 instance

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}")"; pwd -P )"; source "$BIN_DIR/../include/common"

if [[ $# -eq 0 ]]; then
    serviceRoot=$( pwd -P )
elif [[ $# -eq 1 ]]; then
    if [[ "$1" = "-h" || "$1" = "--help" || "$1" = "help" ]]; then
	help_text
    fi
    serviceRoot="$( cd $1 && pwd -P )"
fi

service=$( basename "$serviceRoot" )
loadServiceProperties "$serviceRoot"

# Check ssh access to an EC2 instance
checkInstance() {
    instanceId="$1"
    echo "-- Obtaining public DNS of the instance"
    dnsName=$( aws ec2 describe-instances --instance-ids "$instanceId" | jq -r '.Reservations | .[0] | .Instances | .[0] | .NetworkInterfaces | .[0] | .Association | .PublicDnsName' )
    echo "---- Public DNS for $instanceId is $dnsName"
    
    echo "---- Checking if instance $instanceId is reachable via $dnsName"
    set +e
    while true; do
	checkDNS=$( runRemote "$dnsName" "ls" )
	if [[ $? -eq 0 ]]; then
	    break
	fi
	
	if [[ ! "$checkDNS" =~ "Connection refused" ]]; then
	    echo "---- Failed to reach instance and didn't get a 'Connection refused'"
	    echo "---- Something's weird, check it manually!"
	    echo "$checkDNS"
	    exit 1
	fi
	
	echo "-- Connection refused"
    done
    set -e
}

# Run a script on a remote SSH server
runRemote() {
    ssh -o StrictHostKeyChecking=no -i ~/.ssh/"$EC2_KEYPAIR_NAME".pem "ec2-user@$1" "$2" 2>&1
}

echo "-- Starting configuration for $service"

if [[ ! -e ~/.ssh/"$EC2_KEYPAIR_NAME".pem ]]; then
    echo "-- Missing ~/.ssh/$EC2_KEYPAIR_NAME.pem!"
    echo "-- Aborting"
    exit 1
fi

echo "-- Checking if EC2 IAM role $EC2_IAM_ROLE_NAME exists"
ec2RoleExists=$( isExitSuccess aws iam get-role --role-name "$EC2_IAM_ROLE_NAME" )
if [[ "$ec2RoleExists" = "true" ]]; then
    echo "---- IAM role $EC2_IAM_ROLE_NAME already exists"
else
    echo "---- Creating IAM role $EC2_IAM_ROLE_NAME"
    aws iam create-role --role-name "$EC2_IAM_ROLE_NAME" --assume-role-policy-document "file://$BIN_DIR/../templates/service/role-policy.json" --description "EC2 role for $service"

    echo "---- Attaching AWS Code Deploy policy to role"
    aws iam attach-role-policy --role-name "$DEPLOYER_IAM_ROLE_NAME" --policy-arn "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
fi

echo "-- Checking if IAM instance profile $EC2_IAM_PROFILE_NAME exists"
iamInstanceProfileExists=$( isExitSuccess aws iam get-instance-profile --instance-profile-name "$EC2_IAM_PROFILE_NAME" )
if [[ "$iamInstanceProfileExists" = "true" ]]; then
    echo "---- IAM instance profile $EC2_IAM_PROFILE_NAME already exists"
else
    echo "---- Creating IAM instance profile $EC2_IAM_PROFILE_NAME"
    aws iam create-instance-profile --instance-profile-name "$EC2_IAM_PROFILE_NAME"
    
    echo "---- Attaching role to instance profile"
    aws iam add-role-to-instance-profile --instance-profile-name "$EC2_IAM_PROFILE_NAME" --role-name "$EC2_IAM_ROLE_NAME"
fi

echo "-- Checking if code deploy application $CODE_DEPLOY_APPLICATION_NAME exists"
codeDeployApplicationExists="$( aws deploy list-applications | jq '.applications | any(. == "'"$CODE_DEPLOY_APPLICATION_NAME"'")' )"
if [[ "$codeDeployApplicationExists" = "false" ]]; then
    echo "---- Code deploy application does not exist, creating!"
    aws deploy create-application --application-name "$CODE_DEPLOY_APPLICATION_NAME"
    if [[ $? -ne 0 ]]; then
	echo "---- Failed to create code deploy application"
	exit 1
    fi
else
    echo "---- Code deploy application $CODE_DEPLOY_APPLICATION_NAME already exists"
fi

echo "-- Checking if deployment group $DEPLOYMENT_GROUP_NAME exists"
deploymentGroupExists=$( aws deploy list-deployment-groups --application-name "$CODE_DEPLOY_APPLICATION_NAME" | jq '.deploymentGroups | any(. == "'"$DEPLOYMENT_GROUP_NAME"'")' )
if [[ "$deploymentGroupExists" = "false" ]]; then
    echo "---- Deployment group $DEPLOYMENT_GROUP_NAME does not exist, creating!"
    serviceRoleArn=$( aws iam get-role --role-name "$DEPLOYER_IAM_ROLE_NAME" | jq -r '.Role | .Arn' )
    aws deploy create-deployment-group --application-name "$CODE_DEPLOY_APPLICATION_NAME" --deployment-group-name "$DEPLOYMENT_GROUP_NAME" --service-role-arn "$serviceRoleArn"
    if [[ $? -ne 0 ]]; then
	echo "---- Failed to create deployment group"
	exit 1
    fi
else
    echo "---- Deployment group $DEPLOYMENT_GROUP_NAME already exists"
fi

echo "-- Checking if security group $SECURITY_GROUP_NAME exists"
securityGroupExists=$( isExitSuccess aws ec2 describe-security-groups --group-names "$SECURITY_GROUP_NAME" )
if [[ "$securityGroupExists" = "false" ]]; then
    echo "---- Security group $SECURITY_GROUP_NAME does not exist, creating!"
    aws ec2 create-security-group --group-name "$SECURITY_GROUP_NAME" --description "Security group for $AUTO_SCALING_GROUP_NAME"
    if [[ $? -ne 0 ]]; then
	echo "---- Failed to create security group"
	exit 1
    fi
else
    echo "---- Security group $SECURITY_GROUP_NAME already exists"
fi

securityGroupId=$( aws ec2 describe-security-groups --group-names "$SECURITY_GROUP_NAME" | jq -r '.SecurityGroups | .[0] | .GroupId' )
if [[ -n "$SECURITY_GROUP_INGRESS_IP_PERMISSIONS" ]]; then
    echo "---- Adding ingress rules to security group: $SECURITY_GROUP_INGRESS_IP_PERMISSIONS"
    # Unfortunately, we have no easy way of finding out if the security group already has this rule
    set +e
    error=$( aws ec2 authorize-security-group-ingress --group-id "$securityGroupId" --ip-permissions "$SECURITY_GROUP_INGRESS_IP_PERMISSIONS" 2>&1 )
    if [[ $? -ne 0 ]]; then
	if ! echo "$error" | grep -q 'Duplicate.*already exists'; then
	    echo "---- Failed to add ingress rules to security group $SECURITY_GROUP_NAME (with id $securityGroupId)"
	    exit 1
	fi
    fi
    set -e
fi

if [[ -n "$SECURITY_GROUP_EGRESS_IP_PERMISSIONS" ]]; then
    echo "---- Adding egress rules to security group: $SECURITY_GROUP_EGRESS_IP_PERMISSIONS"
    # Unfortunately, we have no easy way of finding out if the security group already has this rule
    set +e
    error=$( aws ec2 authorize-security-group-egress --group-id "$securityGroupId" --ip-permissions "$SECURITY_GROUP_EGRESS_IP_PERMISSIONS" 2>&1 )
    if [[ $? -ne 0 ]]; then
	if ! echo "$error" | grep -q 'Duplicate.*already exists'; then
	    echo "---- Failed to add egress rules to security group $SECURITY_GROUP_NAME (with id $securityGroupId)"
	    exit 1
	fi
    fi
    set -e
fi

echo "-- Checking existing EC2 instances in security group $SECURITY_GROUP_NAME"
# Obtain the instances as a newline delimited list of instance ids
instances=$( aws ec2 describe-instances --filters "Name=instance.group-name,Values=$SECURITY_GROUP_NAME" | jq -r '[ .Reservations | .[] | .Instances | .[] | .InstanceId ] | join(" ")' )
numInstances=$( echo "$instances" | tr ' ' '\n' | sed '/^$/d' | wc -l | tr -d ' ' )
createInstances=false
if [[ $numInstances -eq 0 ]]; then
    echo "---- No EC2 instance exists in security group $SECURITY_GROUP_NAME"
else
    echo "---- Found $numInstances EC2 instance(s): $instances"
fi

echo "-- Checking if launch configuration $AUTO_SCALING_GROUP_NAME exists"
launchConfigurationExists=$( aws autoscaling describe-launch-configurations --launch-configuration-names "$AUTO_SCALING_GROUP_NAME" | jq -r '.LaunchConfigurations | any' )
if [[ "$launchConfigurationExists" = false ]]; then
    echo "---- No launch configuration $AUTO_SCALING_GROUP_NAME exists, creating!"
    securityGroupId=$( aws ec2 describe-security-groups --group-names "$SECURITY_GROUP_NAME" | jq -r '.SecurityGroups | .[0] | .GroupId' )
    applicationSecurityGroupId=$( aws ec2 describe-security-groups --group-names "$APPLICATION_SECURITY_GROUP_NAME" | jq -r '.SecurityGroups | .[0] | .GroupId' )
    # Unfortuantely, the create-launch-configuration call can sometimes fail sporadically
    set +e
    for x in $( seq 1 3 ); do
	aws autoscaling create-launch-configuration --launch-configuration-name "$AUTO_SCALING_GROUP_NAME" --image-id "ami-5ec1673e" --instance-type t2.micro --key-name "$EC2_KEYPAIR_NAME" --security-groups "$securityGroupId" "$applicationSecurityGroupId" --iam-instance-profile "$EC2_IAM_PROFILE_NAME" --user-data "file://$serviceRoot/aws.config/ec2bootstrap.sh"
	if [[ $? -eq 0 ]]; then
	    break
	fi
	
	if [[ $x -eq 3 ]]; then
	    echo "---- Unable to create launch configuration!! Please check or attempt manually"
	    exit 1
	fi
	echo "---- Re-attempting to create launch configuration"
    done
    set -e
else
    echo "---- Launch configuration $AUTO_SCALING_GROUP_NAME already exists!"
fi

echo "-- Checking if auto scaling group $AUTO_SCALING_GROUP_NAME exists"
autoScalingGroupExists="$( aws autoscaling describe-auto-scaling-groups | jq '.AutoScalingGroups | any(.AutoScalingGroupName == "'"$AUTO_SCALING_GROUP_NAME"'")' )"
if [[ "$autoScalingGroupExists" = "false" ]]; then
    echo "---- Auto scaling group $AUTO_SCALING_GROUP_NAME does not exist!"
    
    instanceId=$( echo "$instances" | cut -d ' ' -f 1 )
    echo "---- Creating auto scaling group $AUTO_SCALING_GROUP_NAME with launch configuration $AUTO_SCALING_GROUP_NAME"
    
    if [[ $numInstances -eq 0 ]]; then
	numInstances=1
	createInstances=true
    fi
    
    aws autoscaling create-auto-scaling-group --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --min-size 0 --max-size "$numInstances" --desired-capacity "$numInstances" --availability-zones "$ZONE" --launch-configuration-name "$AUTO_SCALING_GROUP_NAME"
else
    echo "---- Auto scaling group $AUTO_SCALING_GROUP_NAME already exists"
    aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --min-size 0 --max-size "$numInstances"
fi

echo "-- Checking if auto scaling group $AUTO_SCALING_GROUP_NAME is attached to deployment group"
autoScalingGroupAttached=$( aws deploy get-deployment-group --application-name "$CODE_DEPLOY_APPLICATION_NAME" --deployment-group-name "$DEPLOYMENT_GROUP_NAME" | jq -r '.deploymentGroupInfo | .autoScalingGroups | any("$AUTO_SCALING_GROUP_NAME")' )
if [[ "$autoScalingGroupAttached" = "false" ]]; then
    echo "---- Attaching auto scaling group $AUTO_SCALING_GROUP_NAME to deployment group"
    aws deploy update-deployment-group --application-name "$CODE_DEPLOY_APPLICATION_NAME" --current-deployment-group-name "$DEPLOYMENT_GROUP_NAME" --auto-scaling-groups "$AUTO_SCALING_GROUP_NAME"
else
    echo "---- Auto scaling group $AUTO_SCALING_GROUP_NAME already attached to deployment group"
fi

echo "-- Checking if instances are already assigned to auto scaling group $AUTO_SCALING_GROUP_NAME"
assignedInstances=$( aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$AUTO_SCALING_GROUP_NAME" | jq '.AutoScalingGroups | .[0] | .Instances' )
for instanceId in $instances; do
    if echo "$assignedInstances" | grep -q "$instanceId"; then
	echo "---- Instance $instanceId is already assigned to auto scaling group"
    else
	echo "---- Attaching instance $instanceId to auto scaling group"
	aws autoscaling attach-instances --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --instance-ids "$instanceId"
    fi
done

echo "-- Checking if auto scaling group is deploying new instances"
if [[ "$createInstances" = "true" ]]; then
    echo "---- Waiting for autoscaling group to start creating instances"
    while true; do
	started=$( aws autoscaling describe-scaling-activities --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" | jq -r '.Activities | any' )
	if [[ "$started" = "true" ]]; then
	    break
	fi
	sleep 3
    done
fi    

echo "-- Checking status of instances in auto scaling group $AUTO_SCALING_GROUP_NAME (if they didn't deploy properly, peek at /var/log/cloud-init-output.log)"
while true; do    
    instanceStates=$( aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$AUTO_SCALING_GROUP_NAME" | jq '.AutoScalingGroups | .[0] | .Instances' )
    if [[ "$( echo $instanceStates | jq 'length' )" -eq 0 ]]; then
	if [[ $numInstances -eq 0 ]]; then
	    break;
	fi

	echo "-- No EC2 instances attached to auto scaling group (which is odd since we just created/attached them) ... please check manually!"
	exit 1
    fi

    inService=$( echo "$instanceStates" | jq -r 'all(.LifecycleState == "InService")' )
    if [[ "$inService" = "true" ]]; then
	echo "---- All instances are in service"
	break;
    else
	echo "-- Auto scaling group $AUTO_SCALING_GROUP_NAME instance state:"
	echo "$instanceStates" | jq -r 'map(.InstanceId + ":" + .LifecycleState)'
    fi
    
    sleep 3
done

instances=$( aws ec2 describe-instances --filters "Name=instance.group-name,Values=$SECURITY_GROUP_NAME" | jq -r '[ .Reservations | .[] | .Instances | .[] | .InstanceId ] | join(" ")' )
for instanceId in $instances; do
    echo "-- Checking instance $instanceId"
    checkInstance "$instanceId"
done

echo "-- Service $service is configured!"
echo
echo "-- Deploy code with the deploy command!"